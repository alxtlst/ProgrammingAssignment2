cube <- function(x, n) {
x^3
}
cube
cube(3)
n
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
directory <- "D:/Learning/Coursera/DataScience/week2/specdata"
data <- list()
files <- dir(directory, pattern = '\\.csv', full.names = TRUE)
for (dataFile in files) {
data[[dataFile]] <- read.csv(dataFile)
}
data <- do.call(rbind, data)
templist <-list
templist <-list()
templist[1]<-c(1,2)
templist[[1]]<-c(1,2)
templist[[3]]<-c(3,4)
unlist(templist)
do.call(rbind, templist)
tmp <- do.call(rbind, templist)
do.call(rbind, templist)
templist <-list()
templist[[1]]<-c(1,2)
templist[[3]]<-c(3,4)
templist <-list()
templist[[1]]<-c(id = 1, nobs = 2)
templist[[2]]<-c(id = 3, nobs = 4)
tmp <- do.call(rbind, templist)
tmp
tmp[tmp$nobs>3,][["id"]]
tmp[tmp[nobs]>3,][["id"]]
tmp[tmp["nobs"]>3,][["id"]]
tmp[tmp[["nobs"]]>3,][["id"]]
tmp[tmp[nobs]>3,][["id"]]
tmp[tmp$nobs>3,]
View(tmp)
typeof(tmp)
tmp <- as.data.frame(tmp)
directory
$complete.cases
?complete.cases
library(datasets)
data(iris)
head(iris)
?split
split_iris = split(iris, iris$Species)
virginica = split_iris$virginica
mean(split_iris$virginica$Sepal.Length)
mean(split(iris, iris$Species)$virginica$Sepal.Length)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
head(mtcars)
?mean
?tapply
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
tmp = tapply(mtcars$hp, mtcars$cyl, mean)
tmp[4]
tmp[1]
tmp[1,2]
tmp[1][2]
tmp[1][1]
tmp[[4]]
tmp$4
tmp[3]-tmp[1]
debug(ls)
ls
ls()
getwd()
setwd("D:/Learning/Coursera/DataScience/codebase/ProgrammingAssignment2")
getwd()
source("testCacheSolve.R")
testCacheSolve()
testCacheSolve()
testCacheSolve()
source("testCacheSolve.R")
testCacheSolve()
source("testCacheSolve.R")
testCacheSolve()
testCacheSolve()
source("testCacheSolve.R")
testCacheSolve()
testCacheSolve()
testCacheSolve()
source("testCacheSolve.R")
testCacheSolve()
source("testCacheSolve.R")
testCacheSolve()
source("testCacheSolve.R")
testCacheSolve()
source("testCacheSolve.R")
testCacheSolve()
solve(matrix(3:11, 3, 3))
solve(matrix(4:12, 3, 3))
solve(matrix(9:1, 3, 3))
solve(matrix(1:25, 5, 5))
solve(matrix(rnorm(9, 1, 9), 3, 3))
source("testCacheSolve.R")
testCacheSolve()
